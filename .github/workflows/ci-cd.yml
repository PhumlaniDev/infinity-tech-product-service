name: CI Workflow

permissions:
  issues: read
  contents: read
  actions: read
  security-events: write
  pull-requests: read

on:
  workflow_dispatch:
  pull_request:
    branches: [ develop, main ]
  push:
    branches: [ develop, main ]

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: infinity_tech_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "maven"

      # Cache Maven dependencies explicitly to avoid re-downloading
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      # Pre-fetch dependencies only if cache is not restored
      - name: Pre-fetch Maven dependencies
        run: mvn dependency:go-offline --batch-mode
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Setup Maven settings.xml from secret
        run: |
          mkdir -p ~/.m2
          cat <<'EOF' > ~/.m2/settings.xml
          ${{ secrets.MAVEN_SETTINGS_XML }}
          EOF

      # Run Checkstyle and build in one step to avoid multiple Maven invocations
      - name: Run Checkstyle and Build
        run: mvn --batch-mode checkstyle:check clean install -DskipTests -Dspring.profiles.active=dev
        env:
          GITHUB_USERNAME: ${{ secrets.GITHUB_USERNAME }}
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/infinity_tech_db
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres
          JASYPT_ENCRYPTOR_PASSWORD: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
          GH_PAT: ${{ secrets.GH_PAT }}
          GH_USERNAME: ${{ secrets.GH_USERNAME }}

      - name: Build and Tag Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/product-service:${{ github.run_number }} .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/product-service:${{ github.run_number }} ${{ secrets.DOCKERHUB_USERNAME }}/product-service:latest

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-service:${{ github.run_number }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-service:latest

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "maven"

      - name: Run Unit Tests with H2
        run: mvn --batch-mode test -Dspring.profiles.active=test
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb;MODE=PostgreSQL
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          JASYPT_ENCRYPTOR_PASSWORD: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}

  sast:
    needs: build
    name: Static Application Security Testing (SAST)
    uses: PhumlaniDev/reusable-workflows/.github/workflows/sast.yml@main
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_URL: ${{ secrets.SONAR_URL }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

  sca:
    needs: build
    name: Software Composition Analysis (SCA)
    uses: PhumlaniDev/reusable-workflows/.github/workflows/sca.yml@main
    with:
      project_name: 'product-service'
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  #  dast:
  #    needs: build
  #    name: Dynamic Application Security Testing (DAST)
  #    uses: PhumlaniDev/reusable-workflows/.github/workflows/dast.yml@main
  #    secrets:
  #      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  #      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  #    with:
  #      image-tag: '${{ secrets.DOCKERHUB_USERNAME }}/infinity-product-service:latest'

  notify:
    uses: PhumlaniDev/reusable-workflows/.github/workflows/discord-notify.yml@main
    needs:
      - checkstyle
      - build
      - unit-tests
      - sast
      - sca
    if: always()
    with:
      status: >-
        ${{ (needs.unit-tests.result == 'success' && needs.sast.result == 'success' && needs.sca.result == 'success' && needs.dast.result == 'success') && 'success' || 'failure' }}
      title: "ðŸš€ Workflow Run - Combined Status"
      description: |
        Checkstyle: `${{ needs.checkstyle.result }}`
        Build: `${{ needs.build.result }}`
        Unit Tests: `${{ needs.unit-tests.result }}`
        SAST: `${{ needs.sast.result }}`
        SCA: `${{ needs.sca.result }}`
        Commit: `${{ github.sha }}`
        [View Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
      color: >-
        ${{ (needs.unit-tests.result == 'success' && needs.sast.result == 'success' && needs.sca.result == 'success' && needs.dast.result == 'success') && '3066993' || '15158332' }}
    secrets:
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}